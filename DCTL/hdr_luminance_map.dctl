#include "ty_color_lib.h"
// #include "ty_draw_lib.h"

#define JUDGE_METHOD_RGB2Y   (0)
#define JUDGE_METHOD_MAX_RGB (1)

#define OVER_RANGE_COLOR_M   (0)
#define OVER_RANGE_COLOR_Y   (1)
#define OVER_RANGE_COLOR_C   (2)

__CONSTANT__ float3 over_range_color_m_3f = {1.0f, 0.3f, 1.0f};
__CONSTANT__ float3 over_range_color_y_3f = {1.0f, 1.0f, 0.4f};
__CONSTANT__ float3 over_range_color_c_3f = {0.7f, 1.0f, 1.0f};

__CONSTANT__ float scale_cv_list[] = {0.5080784, 0.5791332, 0.6218628, 0.6525786, 0.6962941, 0.7518271, 0.8274246, 0.8714864, 0.9025724, 0.9460286, 1.0000000};
__CONSTANT__ int scale_y_list[] = {100, 200, 300, 400, 600, 1000, 2000, 3000, 4000, 6000, 10000};
__CONSTANT__ int scale_cv_list_size = 11;

DEFINE_UI_PARAMS(gamut_idx, Timeline Color Gamut, DCTLUI_COMBO_BOX, 2, { GAMUT_IDX_BT709, GAMUT_IDX_P3D65, GAMUT_IDX_BT2020 }, { Rec.709, P3-D65, Rec.2020 })
DEFINE_UI_PARAMS(judge_data_idx, Judgment Data Type, DCTLUI_COMBO_BOX, 0, { JUDGE_METHOD_RGB2Y, JUDGE_METHOD_MAX_RGB }, { Luminance_RGB2Y, Max_Value_Among_RGB })
DEFINE_UI_PARAMS(over_range_color_idx, Over Range Color, DCTLUI_COMBO_BOX, 0, { OVER_RANGE_COLOR_M, OVER_RANGE_COLOR_Y, OVER_RANGE_COLOR_C }, { Magenta, Yellow, Cyan })
DEFINE_UI_PARAMS(st_luminance, Start [cd/m2], DCTLUI_SLIDER_INT, 100, 100, 500, 1)
DEFINE_UI_PARAMS(ed_luminance, End [cd/m2], DCTLUI_SLIDER_INT, 1000, 500, 10000, 1)
DEFINE_UI_PARAMS(show_scale, Show scale, DCTLUI_CHECK_BOX, 1)

__CONSTANT__ float st_pos_h_rate = 0.01;
__CONSTANT__ float st_pos_v_rate = 0.05;
__CONSTANT__ float ed_pos_h_rate = 0.03;
__CONSTANT__ float ed_pos_v_rate = 0.95;
__CONSTANT__ float scale_h_rate = 0.2;
__CONSTANT__ float font_size_rate = 2;
__CONSTANT__ float pq_100_cv = 0.508078421517;
__CONSTANT__ float pq_10000_cv = 1.0;

// main function
__DEVICE__ float3 transform(int p_Width, int p_Height, int p_X, int p_Y, float p_R, float p_G, float p_B)
{
    float3 rgb_in = to_float3(p_R, p_G, p_B);
    float3 rgb_linear = eotf_st2084_f3(rgb_in);

    // convert to Y
    float y;
    if(judge_data_idx == JUDGE_METHOD_RGB2Y){
        y = rgb_2_y(rgb_linear, gamut_idx);
    }
    else if(judge_data_idx == JUDGE_METHOD_MAX_RGB){
        y = _fmaxf(_fmaxf(rgb_linear.x, rgb_linear.y), rgb_linear.z);
    }
    else{
        y = rgb_2_y(rgb_linear, gamut_idx);
    }

    float3 out_linear = to_float3(y, y, y);
    float3 out = oetf_st2084_f3(out_linear);

    return out;
}
